/*
 * DynamicTree.java
 *
 * Version:
 * $Id$
 *
 * Revisions:
 * $Log$
 */

/**
 * DynamicTree program for project2 sorts words
 * 
 * @author rcd1575: Rebecca Dudley
 */
public class DynamicTree<E extends Comparable<E>> implements CS3Tree<E> {

	private class DNode<E> {

		private E data;
		private DNode<E> left;
		private DNode<E> right;

		public DNode(E data) {

			this.data = data;
			left = null;
			right = null;
		}

		public DNode(E data, DNode<E> left, DNode<E> right) {

			this.data = data;
			this.left = left;
			this.right = right;
		}

		public E getData() {
			return data;
		}

		public DNode<E> getRight() {

			return right;
		}

		public DNode<E> getLeft() {

			return left;
		}

		/**
		 * Mutator for the data
		 * 
		 * @param newData
		 *            the new data element
		 */
		public void setData(E newData) {

			data = newData;
		}

		/**
		 * Mutator for the left child
		 * 
		 * @param newLeft
		 *            the new left child
		 */
		public void setLeft(DNode<E> newLeft) {

			left = newLeft;
		}

		/**
		 * Mutator for the right child
		 * 
		 * @param newRight
		 *            the new right child
		 */
		public void setRight(DNode<E> newRight) {

			right = newRight;
		}

		/**
		 * Return a string representation of the data element
		 * 
		 * @return the data element in String form
		 */
		public String toString() {

			return data.toString();
		}

	}

	private DNode<E> root;

	public DynamicTree() {

		root = null;
	}

	@Override
	public boolean add(E data) {
		// TODO Auto-generated method stub
		DNode<E> newNode = new DNode<E>(data);
		if (root == null) {
			root = newNode;
			return true;
		} else {

			return add(root, newNode);
		}

	}

	private boolean add(DNode<E> node, DNode<E> newNode) {

		int result = newNode.getData().compareTo(node.getData());
		if (result < 0) {
			if (node.getLeft() == null) {
				node.setLeft(newNode);
				return true;
			} else {
				return add(node.getLeft(), newNode);
			}
		} else if (result > 0) {
			if (node.getRight() == null) {
				node.setRight(newNode);
				return true;
			} else {
				return add(node.getRight(), newNode);
			}
		}

		return false;

	}

	@Override
	public E get(E data) {
		// TODO Auto-generated method stub

		DNode<E> newNode = new DNode<E>(data);

		return get(newNode, root);
	}

	private E get(DNode<E> newNode, DNode<E> node) {

		if (node == null) {
			return null;
		}
		if (node.getData().compareTo(newNode.getData()) == 0) {
			return node.getData();
		}
		if (newNode.getData().compareTo(node.getData()) < 0) {
			return get(newNode, node.getLeft());
		}
		return get(newNode, node.getRight());
	}

	@Override
	public void print() {
		// TODO Auto-generated method stub

		print(root);

	}

	private void print(DNode<E> node) {
		if (node == null) {
			return;
		}

		print(node.getLeft());
		System.out.println(node.toString());
		print(node.getRight());
	}

}
