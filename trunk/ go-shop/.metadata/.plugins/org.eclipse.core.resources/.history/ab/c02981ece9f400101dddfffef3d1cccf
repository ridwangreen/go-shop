package Controller;

import java.util.Observable;
import java.util.Observer;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import system.GameState;
import system.Peg;
import Command.Command;
import Command.EndGame;
import Command.NewGame;
import GUI.Board;

/*
 * @File BoardController.java
 * 
 * @Authors Becca Dudley
 * 
 * @Class Description the controller for the gameboard GUI
 * 				It updates the GUI based on what is happening in the game
 */
public class BoardController{

	private Board gameBoard;// The board GUI
	private PlayerController players; // the roster of the game

	/**
	 * Constructor: Takes in pegs, makes new board
	 * 
	 * @param guessPegs
	 * @param feedbackPegs
	 * @param players
	 *            The PlayerController containing the current players
	 */
	public BoardController(Peg guessPegs[][], Peg feedbackPegs[][]) {

		gameBoard = new Board(guessPegs, feedbackPegs, players);
		gameBoard.setVisible(true);
	}

	public void endGame(){
		
		gameBoard.setEnabledItem(0, true);
		gameBoard.setEnabledItem(1, false);
		gameBoard.reset();
	}

	public void newGameUpdate() {

		gameBoard.setEnabledItem(0, false);
		gameBoard.setEnabledItem(1, true);
		int response = JOptionPane.showConfirmDialog(null,
				"Would you like to use an existing log?", null,
				JOptionPane.YES_NO_OPTION);
		if (response == JOptionPane.YES_OPTION) {
			JFileChooser logFile = new JFileChooser();
			logFile.setDialogTitle("Choose Log File");
			int returnVal = logFile.showDialog(null, "Open Log");
		}
		Object[] options = { "Local Player", "Remote Player", "AI" };
		int maker = JOptionPane.showOptionDialog(null,
				"What will the CodeMaker be?", null,
				JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
				null, options, options[0]);
		int breaker = JOptionPane.showOptionDialog(null,
				"What will the CodeBreaker be?", null,
				JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
				null, options, options[0]);

		if (breaker == PlayerType.AI.ordinal()) {
			gameBoard.setEnabledAI(false);
		}
		players = new PlayerController(maker, breaker);
	}
	
	/**
	 * The setter for the player controller
	 * 
	 * @param players
	 */
	public void setPlayerColntroller(PlayerController players){
		
		this.players = players;
	}

}
