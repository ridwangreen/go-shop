/*
 * CheckerGUI.java
 * 
 * The actual board.
 *
 * Created on January 25, 2002, 2:34 PM
 * 
 * Version
 * $Id: CheckerGUI.java,v 1.1 2002/10/22 21:12:52 se362 Exp $
 * 
 * Revisions
 * $Log: CheckerGUI.java,v $
 * Revision 1.1  2002/10/22 21:12:52  se362
 * Initial creation of case study
 *
 */

import javax.swing.*;

import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.net.*;

/**
 * 
 * @author
 * @version
 */

public class CheckerGUI extends JFrame implements ActionListener {

	// the facade for the game

	private static Facade theFacade; // the facade
	private Vector<JButton> possibleSquares = new Vector<JButton>();// a vector
																	// of the
																	// squares
	private int timeRemaining;// the time remaining
	private JLabel playerOneLabel;
	private JLabel playerTwoLabel;
	private JLabel timeRemainingLabel;
	private JLabel secondsLeftLabel;
	private JButton ResignButton;
	private JButton DrawButton;
	private JLabel warningLabel, whosTurnLabel;

	// the names and time left
	private static String playerOnesName = "", playerTwosName = "",
			timeLeft = "";

	/**
	 * 
	 * Constructor, creates the GUI and all its components
	 * 
	 * @param facade
	 *            the facade for the GUI to interact with
	 * @param name1
	 *            the first players name
	 * @param name2
	 *            the second players name
	 * 
	 */

	public CheckerGUI(Facade facade, String name1, String name2) {

		super("Checkers");

		// long names mess up the way the GUI displays
		// this code shortens the name if it is too long
		String nameOne = "", nameTwo = "";
		if (name1.length() > 7) {
			nameOne = name1.substring(0, 7);
		} else {
			nameOne = name1;
		}
		if (name2.length() > 7) {
			nameTwo = name2.substring(0, 7);
		} else {
			nameTwo = name2;
		}

		playerOnesName = nameOne;
		playerTwosName = nameTwo;
		// TODO: Use of Facade, possibly change
		theFacade = facade;
		register();

		initComponents();
		pack();
		update();
		// updateTime();
	}

	/*
	 * This method handles setting up the timer
	 */

	private void register() {

		try {
			theFacade.addActionListener(this);

		} catch (Exception e) {

			System.err.println(e.getMessage());

		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * It initializes the components adds the buttons to the Vecotr of squares
	 * and adds an action listener to the components
	 * 
	 */
	private void initComponents() {

		this.setResizable(false);

		for (int i = 0; i < 64; i++) {
			JButton square = new JButton();
			square.addActionListener(this);
			possibleSquares.add(square);
		}

		playerOneLabel = new JLabel();
		playerTwoLabel = new JLabel();
		whosTurnLabel = new JLabel();

		warningLabel = new JLabel();
		timeRemainingLabel = new JLabel();
		secondsLeftLabel = new JLabel();

		ResignButton = new JButton();
		ResignButton.addActionListener(this);

		DrawButton = new JButton();
		DrawButton.addActionListener(this);

		// sets the layout and adds listener for closing window
		getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints gridBagConstraints1;

		// add window listener
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				exitForm(evt);
			}
		});

		possibleSquares.get(0).setPreferredSize(new Dimension(80, 80));
		possibleSquares.get(0).setActionCommand("0");
		possibleSquares.get(0).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(0), gridBagConstraints1);

		possibleSquares.get(1).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(1).setActionCommand("1");
		possibleSquares.get(1).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(1), gridBagConstraints1);

		possibleSquares.get(2).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(2).setActionCommand("2");
		possibleSquares.get(2).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(2), gridBagConstraints1);

		possibleSquares.get(3).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(3).setActionCommand("3");
		possibleSquares.get(3).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(3), gridBagConstraints1);

		possibleSquares.get(4).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(4).setActionCommand("4");
		possibleSquares.get(4).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(4), gridBagConstraints1);

		possibleSquares.get(5).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(5).setActionCommand("5");
		possibleSquares.get(5).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(5), gridBagConstraints1);

		possibleSquares.get(6).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(6).setActionCommand("6");
		possibleSquares.get(6).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(6), gridBagConstraints1);

		possibleSquares.get(7).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(7).setActionCommand("7");
		possibleSquares.get(7).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(possibleSquares.get(7), gridBagConstraints1);

		possibleSquares.get(8).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(8).setActionCommand("8");
		possibleSquares.get(8).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(8), gridBagConstraints1);

		possibleSquares.get(9).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(9).setActionCommand("9");
		possibleSquares.get(9).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(9), gridBagConstraints1);

		possibleSquares.get(10).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(10).setActionCommand("10");
		possibleSquares.get(10).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(10), gridBagConstraints1);

		possibleSquares.get(11).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(11).setActionCommand("11");
		possibleSquares.get(11).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(11), gridBagConstraints1);

		possibleSquares.get(12).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(12).setActionCommand("12");
		possibleSquares.get(12).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(12), gridBagConstraints1);

		possibleSquares.get(13).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(13).setActionCommand("13");
		possibleSquares.get(13).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(13), gridBagConstraints1);

		possibleSquares.get(14).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(14).setActionCommand("14");
		possibleSquares.get(14).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(14), gridBagConstraints1);

		possibleSquares.get(15).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(15).setActionCommand("15");
		possibleSquares.get(15).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(possibleSquares.get(15), gridBagConstraints1);

		possibleSquares.get(16).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(16).setActionCommand("16");
		possibleSquares.get(16).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(16), gridBagConstraints1);

		possibleSquares.get(17).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(17).setActionCommand("17");
		possibleSquares.get(17).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(17), gridBagConstraints1);

		possibleSquares.get(18).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(18).setActionCommand("18");
		possibleSquares.get(18).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(18), gridBagConstraints1);

		possibleSquares.get(19).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(19).setActionCommand("19");
		possibleSquares.get(19).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(19), gridBagConstraints1);

		possibleSquares.get(20).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(20).setActionCommand("20");
		possibleSquares.get(20).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(20), gridBagConstraints1);

		possibleSquares.get(21).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(21).setActionCommand("21");
		possibleSquares.get(21).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(21), gridBagConstraints1);

		possibleSquares.get(22).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(22).setActionCommand("22");
		possibleSquares.get(22).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(22), gridBagConstraints1);

		possibleSquares.get(23).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(23).setActionCommand("23");
		possibleSquares.get(23).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(possibleSquares.get(23), gridBagConstraints1);

		possibleSquares.get(24).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(24).setActionCommand("24");
		possibleSquares.get(24).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(24), gridBagConstraints1);

		possibleSquares.get(25).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(25).setActionCommand("25");
		possibleSquares.get(25).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(25), gridBagConstraints1);

		possibleSquares.get(26).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(26).setActionCommand("26");
		possibleSquares.get(26).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(26), gridBagConstraints1);

		possibleSquares.get(27).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(27).setActionCommand("27");
		possibleSquares.get(27).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(27), gridBagConstraints1);

		possibleSquares.get(28).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(28).setActionCommand("28");
		possibleSquares.get(28).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(28), gridBagConstraints1);

		possibleSquares.get(29).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(29).setActionCommand("29");
		possibleSquares.get(29).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(29), gridBagConstraints1);

		possibleSquares.get(30).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(30).setActionCommand("30");
		possibleSquares.get(30).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(30), gridBagConstraints1);

		possibleSquares.get(31).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(31).setActionCommand("31");
		possibleSquares.get(31).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(possibleSquares.get(31), gridBagConstraints1);

		possibleSquares.get(32).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(32).setActionCommand("32");
		possibleSquares.get(32).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(32), gridBagConstraints1);

		possibleSquares.get(33).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(33).setActionCommand("33");
		possibleSquares.get(33).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(33), gridBagConstraints1);

		possibleSquares.get(34).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(34).setActionCommand("34");
		possibleSquares.get(34).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(34), gridBagConstraints1);

		possibleSquares.get(35).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(35).setActionCommand("35");
		possibleSquares.get(35).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(35), gridBagConstraints1);

		possibleSquares.get(36).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(36).setActionCommand("36");
		possibleSquares.get(36).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(36), gridBagConstraints1);

		possibleSquares.get(37).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(37).setActionCommand("37");
		possibleSquares.get(37).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(37), gridBagConstraints1);

		possibleSquares.get(38).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(38).setActionCommand("38");
		possibleSquares.get(38).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(38), gridBagConstraints1);

		possibleSquares.get(39).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(39).setActionCommand("39");
		possibleSquares.get(39).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 5;
		getContentPane().add(possibleSquares.get(39), gridBagConstraints1);

		possibleSquares.get(40).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(40).setActionCommand("40");
		possibleSquares.get(40).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(40), gridBagConstraints1);

		possibleSquares.get(41).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(41).setActionCommand("41");
		possibleSquares.get(41).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(41), gridBagConstraints1);

		possibleSquares.get(42).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(42).setActionCommand("42");
		possibleSquares.get(42).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(42), gridBagConstraints1);

		possibleSquares.get(43).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(43).setActionCommand("43");
		possibleSquares.get(43).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(43), gridBagConstraints1);

		possibleSquares.get(44).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(44).setActionCommand("44");
		possibleSquares.get(44).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(44), gridBagConstraints1);

		possibleSquares.get(45).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(45).setActionCommand("45");
		possibleSquares.get(45).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(45), gridBagConstraints1);

		possibleSquares.get(46).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(46).setActionCommand("46");
		possibleSquares.get(46).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(46), gridBagConstraints1);

		possibleSquares.get(47).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(47).setActionCommand("47");
		possibleSquares.get(47).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(possibleSquares.get(47), gridBagConstraints1);

		possibleSquares.get(48).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(48).setActionCommand("48");
		possibleSquares.get(48).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(48), gridBagConstraints1);

		possibleSquares.get(49).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(49).setActionCommand("49");
		possibleSquares.get(49).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(49), gridBagConstraints1);

		possibleSquares.get(50).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(50).setActionCommand("50");
		possibleSquares.get(50).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(50), gridBagConstraints1);

		possibleSquares.get(51).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(51).setActionCommand("51");
		possibleSquares.get(51).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(51), gridBagConstraints1);

		possibleSquares.get(52).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(52).setActionCommand("52");
		possibleSquares.get(52).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(52), gridBagConstraints1);

		possibleSquares.get(53).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(53).setActionCommand("53");
		possibleSquares.get(53).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(53), gridBagConstraints1);

		possibleSquares.get(54).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(54).setActionCommand("54");
		possibleSquares.get(54).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(54), gridBagConstraints1);

		possibleSquares.get(55).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(55).setActionCommand("55");
		possibleSquares.get(55).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(possibleSquares.get(55), gridBagConstraints1);

		possibleSquares.get(56).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(56).setActionCommand("56");
		possibleSquares.get(56).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(56), gridBagConstraints1);

		possibleSquares.get(57).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(57).setActionCommand("57");
		possibleSquares.get(57).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 1;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(57), gridBagConstraints1);

		possibleSquares.get(58).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(58).setActionCommand("58");
		possibleSquares.get(58).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(58), gridBagConstraints1);

		possibleSquares.get(59).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(59).setActionCommand("59");
		possibleSquares.get(59).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 3;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(59), gridBagConstraints1);

		possibleSquares.get(60).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(60).setActionCommand("60");
		possibleSquares.get(60).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 4;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(60), gridBagConstraints1);

		possibleSquares.get(61).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(61).setActionCommand("61");
		possibleSquares.get(61).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 5;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(61), gridBagConstraints1);

		possibleSquares.get(62).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(62).setActionCommand("62");
		possibleSquares.get(62).setBackground(new Color(204, 204, 153));

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 6;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(62), gridBagConstraints1);

		possibleSquares.get(63).setPreferredSize(new java.awt.Dimension(80, 80));
		possibleSquares.get(63).setActionCommand("63");
		possibleSquares.get(63).setBackground(Color.white);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 7;
		gridBagConstraints1.gridy = 8;
		getContentPane().add(possibleSquares.get(63), gridBagConstraints1);

		playerOneLabel.setText("Player 1:     " + playerOnesName);
		playerOneLabel.setForeground(Color.black);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 0;
		gridBagConstraints1.gridwidth = 4;
		getContentPane().add(playerOneLabel, gridBagConstraints1);

		playerTwoLabel.setText("Player 2:     " + playerTwosName);
		playerTwoLabel.setForeground(Color.black);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 2;
		gridBagConstraints1.gridy = 9;
		gridBagConstraints1.gridwidth = 4;
		getContentPane().add(playerTwoLabel, gridBagConstraints1);

		whosTurnLabel.setText("");
		whosTurnLabel.setForeground(new Color(0, 100, 0));

		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 1;
		getContentPane().add(whosTurnLabel, gridBagConstraints1);

		warningLabel.setText("");
		warningLabel.setForeground(Color.red);

		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 2;
		getContentPane().add(warningLabel, gridBagConstraints1);

		timeRemainingLabel.setText("Time Remaining:");
		timeRemainingLabel.setForeground(Color.black);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 3;
		getContentPane().add(Label, gridBagConstraints1);

		secondsLeftLabel.setText(timeLeft + " sec.");
		secondsLeftLabel.setForeground(Color.black);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 4;
		getContentPane().add(secondsLeftLabel, gridBagConstraints1);

		ResignButton.setActionCommand("resign");
		ResignButton.setText("Resign");

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 7;
		getContentPane().add(ResignButton, gridBagConstraints1);

		DrawButton.setActionCommand("draw");
		DrawButton.setText("Draw");

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 8;
		gridBagConstraints1.gridy = 6;
		getContentPane().add(DrawButton, gridBagConstraints1);

	}

	/**
	 * 
	 * Exit the Application
	 * 
	 * @param the
	 *            window event
	 * 
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {
		// TODO: Use of Facade, possibly change
		theFacade.pressQuit();

	}
	

	/**
	 * Updates the GUI reading the pieces in the board Puts pieces in correct
	 * spaces, updates whos turn it is
	 * 
	 * @param the
	 *            board
	 */

	public void update() {

		if (checkEndConditions()) {

			theFacade.showEndGame(" ");
		}
		// the board to read information from
		// TODO: Creation of Board, remove
		// TODO: Use of Facade, possibly change
		Board board = theFacade.stateOfBoard();
		// a temp button to work with
		JButton temp = new JButton();

		// go through the board
		for (int i = 1; i < board.sizeOf(); i++) {

			// if there is a piece there
			if (board.occupied(i)) {

				// check to see if color is blue
				if (board.colorAt(i) == Color.blue) {

					// if there is a single piece there
					if ((board.getPieceAt(i)).getType() == board.SINGLE) {

						// show a blue single piece in that spot board
						temp = (JButton) possibleSquares.get(i);

						// get the picture from the web
						try {
							temp.setIcon(new ImageIcon(new URL(
									"file:BlueSingle.gif")));
						} catch (MalformedURLException e) {
							System.out.println(e.getMessage());
						}

						// if there is a kinged piece there
						// TODO: Use of Board, remove
					} else if ((board.getPieceAt(i)).getType() == board.KING) {

						// show a blue king piece in that spot board
						temp = (JButton) possibleSquares.get(i);

						// get the picture formt the web
						try {
							temp.setIcon(new ImageIcon(new URL(
									"file:BlueKing.gif")));
						} catch (Exception e) {
						}

					}

					// check to see if the color is white
					// TODO: Use of Board, remove
				} else if (board.colorAt(i) == Color.white) {

					// if there is a single piece there
					// TODO: Use of Board, remove
					if ((board.getPieceAt(i)).getType() == board.SINGLE) {

						// show a blue single piece in that spot board
						temp = (JButton) possibleSquares.get(i);

						// get the picture from the web
						try {
							temp.setIcon(new ImageIcon(new URL(
									"file:WhiteSingle.gif")));
						} catch (Exception e) {
						}

						// if there is a kinged piece there
						// TODO: Use of Board, remove
					} else if ((board.getPieceAt(i)).getType() == board.KING) {

						// show a blue king piece in that spot board
						temp = (JButton) possibleSquares.get(i);

						// get the picture from the web
						try {
							temp.setIcon(new ImageIcon(new URL(
									"file:WhiteKing.gif")));
						} catch (Exception e) {
						}
					}
					// if there isnt a piece there
				}
			} else {
				// show no picture
				temp = (JButton) possibleSquares.get(i);
				temp.setIcon(null);
			}
		}

		// this code updates whos turn it is
		// TODO: Use of Facade, possibly change
		if (theFacade.whosTurn() == 2) {
			playerTwoLabel.setForeground(Color.red);
			playerOneLabel.setForeground(Color.black);
			whosTurnLabel.setText(playerTwosName + "'s turn ");
			// TODO: Use of Facade, possibly change
		} else if (theFacade.whosTurn() == 1) {
			playerOneLabel.setForeground(Color.red);
			playerTwoLabel.setForeground(Color.black);
			whosTurnLabel.setText(playerOnesName + "'s turn");
		}
	}

	/**
	 * 
	 * Update the timer
	 * 
	 */

	public void updateTime() {

		// TODO: Use of Facade, possibly change
		if (theFacade.getTimer() > 0) {

			// if the time has run out but not in warning time yet
			// display warning and count warning time
			if (timeRemaining <= 0 && (warningLabel.getText()).equals("")) {
				timeRemaining = theFacade.getTimerWarning();
				warningLabel.setText("Time is running out!!!");

				// if the time has run out and it was in warning time quit game
			} else if (timeRemaining <= 0
					&& !(warningLabel.getText()).equals("")) {

				// TODO: Use of Facade, possibly change
				theFacade.pressQuit();

			} else {

				timeRemaining--;

			}

			secondsLeftLabel.setText(timeRemaining + " sec.");

		} else {
			secondsLeftLabel.setText("*****");
		}
	}

	/**
	 * Checks the ending condotions for the game see if there a no pieces left
	 * 
	 * @return the return value for the method true if the game should end false
	 *         if game needs to continue
	 */

	public boolean checkEndConditions() {

		// the return value
		boolean retVal = false;
		try {
			// the number of each piece left
			int whitesGone = 0, bluesGone = 0;

			// the board to work with
			// TODO: Use of Board, remove
			// TODO: Use of Facade, possibly change
			Board temp = theFacade.stateOfBoard();

			// go through all the spots on the board
			for (int i = 1; i < temp.sizeOf(); i++) {
				// if there is a piece there
				if (temp.occupied(i)) {
					// if its a blue piece there
					if ((temp.getPieceAt(i)).getColor() == Color.blue) {
						// increment number of blues
						bluesGone++;
						// if the piece is white
					} else if ((temp.getPieceAt(i)).getColor() == Color.white) {
						// increment number of whites
						whitesGone++;
					}
				}
			}// end of for loop

			// if either of the number are 0
			if (whitesGone == 0 || bluesGone == 0) {
				retVal = true;
			}

		} catch (Exception e) {

			System.err.println(e.getMessage());

		}
		return retVal;

	}// checkEndConditions
	
	public int getTimeRemaining(){
		
		return timeRemaining;
	}

}// checkerGUI.java
