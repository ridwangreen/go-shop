package player;


public class PlayerAdapter {

	private Players roster[];
	private int turn;
	private Difficulty skill;
	private CodeMaker maker;
	private CodeBreaker breaker;
	private PlayerType makerType;
	private PlayerType breakerType;

	public PlayerAdapter(PlayerType makerType, PlayerType breakerType) {

		turn = 0;
		roster = new Players[2];
		this.makerType = makerType;
		this.breakerType = breakerType;
		maker = new CodeMaker(makerType);
		breaker = new CodeBreaker(breakerType);
		roster[0] = maker;
		roster[1] = breaker;
	}

	/**
	 * The method for making a turn if the player is an AI It checks if the
	 * player is an AI and if it then the player will make move. Otherwise it
	 * does nothing
	 */
	public void nextTurnAI() {

		if (turn > 1) {
			turn = 0;
		}
		if (turn == 0){
			if(makerType == PlayerType.AI){
				nextTurn();
			}
		}else{
			if(breakerType == PlayerType.AI){
				nextTurn();
			}
		}
	}

	/**
	 * Calls the next player and tells it to makeMove
	 */
	public void nextTurn() {

		if (turn > 1) {
			turn = 0;
		}
		roster[turn].makeMove();
		turn++;
	}

	/**
	 * Getter for the codemaker
	 * 
	 * @return the code maker
	 */
	public CodeMaker getMaker() {

		return maker;
	}

	/**
	 * Getter for the codebreaker
	 * 
	 * @return the code breaker
	 */
	public CodeBreaker getBreaker() {

		return breaker;
	}
	
	public PlayerType getMakerType(){
		
		return makerType;
	}
	
	public PlayerType getBreakerType(){
		
		return breakerType;
	}
}
