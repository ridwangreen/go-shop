/*
 * CheckerGUI.java
 * 
 * The actual board.
 *
 * Created on January 25, 2002, 2:34 PM
 * 
 * Version
 * $Id: CheckerGUI.java,v 1.1 2002/10/22 21:12:52 se362 Exp $
 * 
 * Revisions
 * $Log: CheckerGUI.java,v $
 * Revision 1.1  2002/10/22 21:12:52  se362
 * Initial creation of case study
 *
 */

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.net.*;

/**
 * 
 * @author
 * @version
 */

public class CheckerGUI extends JFrame implements ActionListener {

	// the facade for the game

	private static Facade theFacade; // the facade
	private int timeRemaining;// the time remaining
	private JButton buttons[][];

	private JButton jButton1;
	private JButton jButton2;
	private JButton jButton3;
	private JButton jButton4;
	private JButton jButton5;
	private JButton jButton6;
	private JButton jButton7;
	private JButton jButton8;
	private JButton jButton9;
	private JButton jButton10;
	private JButton jButton11;
	private JButton jButton12;
	private JButton jButton13;
	private JButton jButton14;
	private JButton jButton15;
	private JButton jButton16;
	private JButton jButton17;
	private JButton jButton18;
	private JButton jButton19;
	private JButton jButton20;
	private JButton jButton21;
	private JButton jButton22;
	private JButton jButton23;
	private JButton jButton24;
	private JButton jButton25;
	private JButton jButton26;
	private JButton jButton27;
	private JButton jButton28;
	private JButton jButton29;
	private JButton jButton30;
	private JButton jButton31;
	private JButton jButton32;
	private JButton jButton33;
	private JButton jButton34;
	private JButton jButton35;
	private JButton jButton36;
	private JButton jButton37;
	private JButton jButton38;
	private JButton jButton39;
	private JButton jButton40;
	private JButton jButton41;
	private JButton jButton42;
	private JButton jButton43;
	private JButton jButton44;
	private JButton jButton45;
	private JButton jButton46;
	private JButton jButton47;
	private JButton jButton48;
	private JButton jButton49;
	private JButton jButton50;
	private JButton jButton51;
	private JButton jButton52;
	private JButton jButton53;
	private JButton jButton54;
	private JButton jButton55;
	private JButton jButton56;
	private JButton jButton57;
	private JButton jButton58;
	private JButton jButton59;
	private JButton jButton60;
	private JButton jButton61;
	private JButton jButton62;
	private JButton jButton63;
	private JButton jButton64;
	private JLabel PlayerOnelabel;
	private JLabel playerTwoLabel;
	private JLabel timeRemainingLabel;
	private JLabel secondsLeftLabel;
	private JButton ResignButton;
	private JButton DrawButton;
	private JLabel warningLabel, whosTurnLabel;
	private JPanel mainPanel;
	private JPanel gridPanel;

	// the names and time left
	private static String playerOnesName = "", playerTwosName = "",
			timeLeft = "";

	/**
	 * 
	 * Constructor, creates the GUI and all its components
	 * 
	 * @param facade
	 *            the facade for the GUI to interact with
	 * @param name1
	 *            the first players name
	 * @param name2
	 *            the second players name
	 * 
	 */

	public CheckerGUI(Facade facade, String name1, String name2) {

		super("Checkers");
		buttons = new JButton[8][8];

		// long names mess up the way the GUI displays
		// this code shortens the name if it is too long
		String nameOne = "", nameTwo = "";
		if (name1.length() > 7) {
			nameOne = name1.substring(0, 7);
		} else {
			nameOne = name1;
		}
		if (name2.length() > 7) {
			nameTwo = name2.substring(0, 7);
		} else {
			nameTwo = name2;
		}

		playerOnesName = nameOne;
		playerTwosName = nameTwo;
		// TODO: Use of Facade, possibly change
		theFacade = facade;
		register();

		initComponents();
		pack();
		update();
		// updateTime();
	}

	/*
	 * This method handles setting up the timer
	 */

	private void register() {

		try {
			theFacade.addActionListener(this);

		} catch (Exception e) {

			System.err.println(e.getMessage());

		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * It initializes the components adds the buttons to the Vecotr of squares
	 * and adds an action listener to the components
	 * 
	 */
	private void initComponents() {

		this.setResizable(false);

		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 8; y++) {
				JButton button = new JButton();
				button.addActionListener(this);
				button.setPreferredSize(new java.awt.Dimension(80, 80));
				buttons[x][y] = button;
			}
		}

		warningLabel = new JLabel();
		timeRemainingLabel = new JLabel();
		secondsLeftLabel = new JLabel();

		ResignButton = new JButton();
		ResignButton.addActionListener(this);

		DrawButton = new JButton();
		DrawButton.addActionListener(this);

		// sets the layout and adds listener for closing window
		getContentPane().setLayout(new BorderLayout());
		GridBagConstraints gridBagConstraints1;

		// add window listener
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				exitForm(evt);
			}
		});
		JPanel gridPanel = new JPanel();
		gridPanel.setLayout(new GridLayout(8, 8));

		for (int r = 0; r < 8; r++) {
			for (int c = 0; c < 8; c++) {
				JButton cel = buttons[r][c];
				cel.setBackground(new Color(204, 204, 153));
				gridPanel.add(cel);
			}
		}

		getContentPane().add(gridPanel, BorderLayout.CENTER);

		PlayerOnelabel = new JLabel();
		PlayerOnelabel.setText("Player 1:     " + playerOnesName);
		PlayerOnelabel.setForeground(Color.black);

		getContentPane().add(PlayerOnelabel, BorderLayout.NORTH);

		playerTwoLabel = new JLabel();
		playerTwoLabel.setText("Player 2:     " + playerTwosName);
		playerTwoLabel.setForeground(Color.black);

		getContentPane().add(playerTwoLabel, BorderLayout.NORTH);

		whosTurnLabel = new JLabel();
		whosTurnLabel.setText("");
		whosTurnLabel.setForeground(new Color(0, 100, 0));

		getContentPane().add(whosTurnLabel, BorderLayout.EAST);

		warningLabel.setText("");
		warningLabel.setForeground(Color.red);

		getContentPane().add(warningLabel, BorderLayout.EAST);

		timeRemainingLabel.setText("Time Remaining:");
		timeRemainingLabel.setForeground(Color.black);

		getContentPane().add(timeRemainingLabel, BorderLayout.EAST);

		secondsLeftLabel.setText(timeLeft + " sec.");
		secondsLeftLabel.setForeground(Color.black);

		getContentPane().add(secondsLeftLabel, BorderLayout.EAST);

		ResignButton.setActionCommand("resign");
		ResignButton.setText("Resign");

		getContentPane().add(ResignButton, BorderLayout.EAST);

		DrawButton.setActionCommand("draw");
		DrawButton.setText("Draw");

		getContentPane().add(DrawButton, BorderLayout.EAST);

	}

	/**
	 * 
	 * Exit the Application
	 * 
	 * @param the
	 *            window event
	 * 
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {
		// TODO: Use of Facade, possibly change
		theFacade.pressQuit();

	}

	/**
	 * Takes care of input from users, handles any actions performed
	 * 
	 * @param e
	 *            the event that has occured
	 */

	public void actionPerformed(ActionEvent e) {

		try {
			// if a square gets clicked
			if (e.getActionCommand().equals("1")
					|| e.getActionCommand().equals("3")
					|| e.getActionCommand().equals("5")
					|| e.getActionCommand().equals("7")
					|| e.getActionCommand().equals("8")
					|| e.getActionCommand().equals("10")
					|| e.getActionCommand().equals("12")
					|| e.getActionCommand().equals("14")
					|| e.getActionCommand().equals("17")
					|| e.getActionCommand().equals("19")
					|| e.getActionCommand().equals("21")
					|| e.getActionCommand().equals("23")
					|| e.getActionCommand().equals("24")
					|| e.getActionCommand().equals("26")
					|| e.getActionCommand().equals("28")
					|| e.getActionCommand().equals("30")
					|| e.getActionCommand().equals("33")
					|| e.getActionCommand().equals("35")
					|| e.getActionCommand().equals("37")
					|| e.getActionCommand().equals("39")
					|| e.getActionCommand().equals("40")
					|| e.getActionCommand().equals("42")
					|| e.getActionCommand().equals("44")
					|| e.getActionCommand().equals("46")
					|| e.getActionCommand().equals("49")
					|| e.getActionCommand().equals("51")
					|| e.getActionCommand().equals("53")
					|| e.getActionCommand().equals("55")
					|| e.getActionCommand().equals("56")
					|| e.getActionCommand().equals("58")
					|| e.getActionCommand().equals("60")
					|| e.getActionCommand().equals("62")) {

				// call selectSpace with the button pressed
				// TODO: Use of Facade, possibly change
				theFacade.selectSpace(Integer.parseInt(e.getActionCommand()));

				// if draw is pressed
			} else if (e.getActionCommand().equals("draw")) {
				// does sequence of events for a draw
				// TODO: Use of Facade, possibly change
				theFacade.pressDraw();

				// if resign is pressed
			} else if (e.getActionCommand().equals("resign")) {
				// does sequence of events for a resign
				// TODO: Use of Facade, possibly change
				theFacade.pressQuit();

				// if the source came from the facade
			} else if (e.getSource().equals(theFacade)) {

				// if its a player switch event
				if ((e.getActionCommand()).equals(theFacade.playerSwitch)) {
					// set a new time
					timeRemaining = theFacade.getTimer();
					// if it is an update event
				} else if ((e.getActionCommand()).equals(theFacade.update)) {
					// update the GUI
					update();
				} else {
					throw new Exception("unknown message from facade");
				}
			}
			// catch various Exceptions
		} catch (NumberFormatException excep) {
			System.err
					.println("GUI exception: Error converting a string to a number");
		} catch (NullPointerException exception) {
			System.err.println("GUI exception: Null pointerException "
					+ exception.getMessage());
			exception.printStackTrace();
		} catch (Exception except) {
			System.err.println("GUI exception: other: " + except.getMessage());
			except.printStackTrace();
		}

	}

	/**
	 * Updates the GUI reading the pieces in the board Puts pieces in correct
	 * spaces, updates whos turn it is
	 * 
	 * @param the
	 *            board
	 */

	private void update() {

		if (checkEndConditions()) {

			theFacade.showEndGame(" ");
		}
		// the board to read information from
		// TODO: Creation of Board, remove
		// TODO: Use of Facade, possibly change
		Board board = theFacade.stateOfBoard();
		// a temp button to work with
		JButton temp = new JButton();

		// go through the board
		for (int r = 0; r < 8; r++) {
			for (int c = 0; c < 8; c++) {

				// if there is a piece there
				if (board.occupied(r, c)) {

					// check to see if color is blue
					if (board.colorAt(r, c) == Color.blue) {

						// if there is a single piece there
						if ((board.getPieceAt(r, c)).getType() == board.SINGLE) {

							// show a blue single piece in that spot board
							temp = buttons[r][c];

							// get the picture from the web
							try {
								temp.setIcon(new ImageIcon(new URL(
										"file:BlueSingle.gif")));
							} catch (MalformedURLException e) {
								System.out.println(e.getMessage());
							}

							// if there is a kinged piece there
							// TODO: Use of Board, remove
						} else if ((board.getPieceAt(r,c)).getType() == board.KING) {

							// show a blue king piece in that spot board
							temp = buttons[r][c];

							// get the picture formt the web
							try {
								temp.setIcon(new ImageIcon(new URL(
										"file:BlueKing.gif")));
							} catch (Exception e) {
							}

						}

						// check to see if the color is white
						// TODO: Use of Board, remove
					} else if (board.colorAt(r,c) == Color.white) {

						// if there is a single piece there
						// TODO: Use of Board, remove
						if ((board.getPieceAt(r,c)).getType() == board.SINGLE) {

							// show a blue single piece in that spot board
							temp = buttons[r][c];

							// get the picture from the web
							try {
								temp.setIcon(new ImageIcon(new URL(
										"file:WhiteSingle.gif")));
							} catch (Exception e) {
							}

							// if there is a kinged piece there
							// TODO: Use of Board, remove
						} else if ((board.getPieceAt(r,c)).getType() == board.KING) {

							// show a blue king piece in that spot board
							temp = buttons[r][c];

							// get the picture from the web
							try {
								temp.setIcon(new ImageIcon(new URL(
										"file:WhiteKing.gif")));
							} catch (Exception e) {
							}
						}
						// if there isnt a piece there
					}
				} else {
					// show no picture
					temp = buttons[r][c];
					temp.setIcon(null);
				}
			}
		}

		// this code updates whos turn it is
		// TODO: Use of Facade, possibly change
		if (theFacade.whosTurn() == 2) {
			playerTwoLabel.setForeground(Color.red);
			PlayerOnelabel.setForeground(Color.black);
			whosTurnLabel.setText(playerTwosName + "'s turn ");
			// TODO: Use of Facade, possibly change
		} else if (theFacade.whosTurn() == 1) {
			PlayerOnelabel.setForeground(Color.red);
			playerTwoLabel.setForeground(Color.black);
			whosTurnLabel.setText(playerOnesName + "'s turn");
		}
	}

	/**
	 * 
	 * Update the timer
	 * 
	 */

	public void updateTime() {

		// TODO: Use of Facade, possibly change
		if (theFacade.getTimer() > 0) {

			// if the time has run out but not in warning time yet
			// display warning and count warning time
			if (timeRemaining <= 0 && (warningLabel.getText()).equals("")) {
				timeRemaining = theFacade.getTimerWarning();
				warningLabel.setText("Time is running out!!!");

				// if the time has run out and it was in warning time quit game
			} else if (timeRemaining <= 0
					&& !(warningLabel.getText()).equals("")) {

				// TODO: Use of Facade, possibly change
				theFacade.pressQuit();

			} else {

				timeRemaining--;

			}

			secondsLeftLabel.setText(timeRemaining + " sec.");

		} else {
			secondsLeftLabel.setText("*****");
		}
	}

	/**
	 * Checks the ending condotions for the game see if there a no pieces left
	 * 
	 * @return the return value for the method true if the game should end false
	 *         if game needs to continue
	 */

	public boolean checkEndConditions() {

		// the return value
		boolean retVal = false;
		try {
			// the number of each piece left
			int whitesGone = 0, bluesGone = 0;

			// the board to work with
			// TODO: Use of Board, remove
			// TODO: Use of Facade, possibly change
			Board temp = theFacade.stateOfBoard();

			// go through all the spots on the board
			for (int r = 0; r < 8; r++) {
				for(int c = 0; c < 8; c++){
					// if there is a piece there
					if (temp.occupied(r,c)) {
						// if its a blue piece there
						if ((temp.getPieceAt(r,c)).getColor() == Color.blue) {
							// increment number of blues
							bluesGone++;
							// if the piece is white
						} else if ((temp.getPieceAt(r,c)).getColor() == Color.white) {
							// increment number of whites
							whitesGone++;
						}
					}
				}
			}// end of for loop

			// if either of the number are 0
			if (whitesGone == 0 || bluesGone == 0) {
				retVal = true;
			}

		} catch (Exception e) {

			System.err.println(e.getMessage());

		}
		return retVal;

	}// checkEndConditions

}// checkerGUI.java
