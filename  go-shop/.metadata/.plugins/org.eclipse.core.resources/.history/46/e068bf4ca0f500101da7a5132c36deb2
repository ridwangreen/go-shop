package Controller;

import player.CodeBreaker;
import player.CodeBreaker_AI;
import player.CodeBreaker_Local;
import player.CodeBreaker_Remote;
import player.CodeMaker;
import player.CodeMaker_AI;
import player.CodeMaker_Local;
import player.CodeMaker_Remote;
import player.Difficulty;
import player.Player;

public class PlayerController {

	private Player roster[];
	private int turn;
	private Difficulty skill;
	private CodeMaker maker;
	private CodeBreaker breaker;
	private PlayerType makerType;
	private playerTyoe breakerType;
	
	public PlayerController(int makerType, int breakerType) {

		turn = 0;
		roster = new Player[2];

		if (makerType == PlayerType.LOCAL.ordinal()) {
			maker = new CodeMaker_Local();
		} else if (makerType == PlayerType.REMOTE.ordinal()) {
			maker = new CodeMaker_Remote();
		} else {
			maker = new CodeMaker_AI();
		}

		roster[0] = maker;

		if (breakerType == PlayerType.LOCAL.ordinal()) {
			breaker = new CodeBreaker_Local();
		} else if (breakerType == PlayerType.REMOTE.ordinal()) {
			breaker = new CodeBreaker_Remote();
		} else {
			// thingy needs a difficulty
			breaker = new CodeBreaker_AI(skill);
		}

		roster[1] = breaker;
	}

	/**
	 * The method for making a turn if the player is an AI
	 * It checks if the player is an AI and if it then the player
	 * will make move.  Otherwise it does nothing
	 */
	public void nextTurnAI() {
		
		if (turn > 1) {
			turn = 0;
		}
		if (roster[turn].getClass().equals(CodeMaker_AI)
				|| roster[turn].getClass().equals(CodeBreaker_AI)) {
			nextTurn();
		}
	}
	
	/**
	 * Calls the next player and tells it to makeMove
	 */
	public void nextTurn(){
		
		if (turn > 1) {
			turn = 0;
		}
		roster[turn].makeMove();
		turn++;
	}
	
	/**
	 * Getter for the codemaker
	 *  
	 * @return the code maker
	 */
	public CodeMaker getMaker(){
	
		return maker;
	}
	
	/**
	 * Getter for the codebreaker
	 * 
	 * @return the code breaker
	 */
	public CodeBreaker getBreaker(){
		
		return breaker;
	}
}
